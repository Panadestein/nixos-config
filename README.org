#+BEGIN_HTML
<a href="https://raw.githubusercontent.com/Panadestein/nixos-config/main/LICENSE.md">
<img alt="GPLv3" src="https://img.shields.io/github/license/Panadestein/nixos-config" />
</a>

<a href="https://builtwithnix.org">
<img alt="Build with Nix" src="https://builtwithnix.org/badge.svg" />
</a>
#+END_HTML

* Panadestein's Nix/NixOS

Welcome to my flake [[https://nixos.org/][Nix/NixOS]] configuration using [[https://nix-community.github.io/home-manager/][home-manager]]. The generated system should be
production-ready (at least for my taste), and ships with the [[https://xmonad.org/][xmonad]] and [[http://www.qtile.org/][Qtile]] tiling window managers.
I also have a declarative configuration of the [[https://release.gnome.org/][gnome]] desktop environment, although I rarely use it.

** Remarks:

The config is tailored to AMD hardware and need to be adjusted to other machines.

*** Using flakes

Nix [[https://www.tweag.io/blog/2020-07-31-nixos-flakes/][flakes]] is the preferred way to use this configuration. With flakes we can maximize the reproducibility
of the system, and also easily add support for several machines within the =flake.nix= file.

**** NixOS

My NixOS machine is called [[https://en.wikipedia.org/wiki/Cyrus_Smith][cyrus]]. Here I build the home and system configuration together as follows:

#+begin_src bash
  sudo nixos-rebuild --flake .#<HOSTNAME> switch
#+end_src

Upgrading the system implies updating the inputs one at the time:

#+begin_src bash
  sudo nix flake lock --update-input <INPUT>
#+end_src

or all of them together:

#+begin_src bash
  nix flake update
#+end_src

**** Non-NixOS

I maintain a second configuration for non-NixOS hosts (tested in Guix System so far), which is
called [[https://en.wikipedia.org/wiki/Atabey_(goddess)][atabey]]. Here I build only the home configuration:

#+begin_src bash
  nix build .#<USERNAME>
  ./result/activate
#+end_src

*** Using nix-channels

The flake configuration can be easily transformed into a non-flake, channel based one.
For example, if you want to use the =nixos-unstable= you could do:

#+begin_src bash
  sudo nix-channel --add https://nixos.org/channels/nixos-unstable nixos
  sudo nixos-rebuild switch --upgrade
#+end_src

When using a hybrid workflow (e.g. to keep using =nix-shell= in a flake system)
it is important to update the channels without rebuilding:

#+begin_src bash
  nix-channel --update
#+end_src

** TODO

- Prune =atabey='s configuration of unused packages.
